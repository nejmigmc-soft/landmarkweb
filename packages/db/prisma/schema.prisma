generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENT
  USER
}

enum PropertyType {
  DAIRE
  VILLA
  RESIDENCE
  ISYERI
  ARSA
}

enum PropertyStatus {
  SATILIK
  KIRALIK
}

enum Currency {
  TRY
  USD
  EUR
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  phone        String?
  role         Role      @default(USER)
  passwordHash String
  properties   Property[]
  favorites    Favorite[]
  inquiries    Inquiry[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Property {
  id          String          @id @default(cuid())
  title       String
  slug        String          @unique
  description String
  type        PropertyType
  status      PropertyStatus
  price       Decimal         @db.Decimal(12,2)
  currency    Currency        @default(TRY)
  grossM2     Int?
  netM2       Int?
  rooms       String
  bath        Int?
  floor       Int?
  totalFloor  Int?
  heating     String?
  age         Int?
  furnished   Boolean?
  location    Json            // {lat,lng,address,city,district,neighborhood}
  features    Json?           // array-like data stored as JSON
  images      PropertyImage[]
  videoUrl    String?
  agent       User            @relation(fields: [agentId], references: [id])
  agentId     String
  published   Boolean         @default(false)
  publishedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  tags        PropertyTag[]
  favorites   Favorite[]
  inquiries   Inquiry[]
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  alt        String?
  order      Int      @default(0)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())
}

model Tag {
  id    String        @id @default(cuid())
  name  String
  slug  String        @unique
  props PropertyTag[]
  createdAt DateTime  @default(now())
}

model PropertyTag {
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  @@id([propertyId, tagId])
}

model Favorite {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime  @default(now())
  
  @@unique([userId, propertyId])
}

model Inquiry {
  id         String    @id @default(cuid())
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
  name       String
  email      String
  phone      String?
  message    String
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  handled    Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String?
  contentMD String
  coverUrl  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Insurance Models
enum InsuranceQuoteStatus {
  NEW
  CONTACTED
  QUOTED
  WON
  LOST
}

model InsuranceProduct {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  shortDesc   String?
  description String?
  features    Json?
  icon        String?  // e.g. "/assets/insurance/icons/kasko.svg"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quotes      InsuranceQuote[]
}

model InsuranceQuote {
  id          String                @id @default(cuid())
  fullName    String
  email       String
  phone       String
  city        String?
  details     Json?
  status      InsuranceQuoteStatus  @default(NEW)
  product     InsuranceProduct      @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime              @default(now())
}
